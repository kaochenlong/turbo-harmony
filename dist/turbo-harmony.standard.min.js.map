{"version":3,"file":"turbo-harmony.standard.min.js","sources":["../src/index.js"],"sourcesContent":["/**\n * TurboHarmony - Alpine.js + Turbo Integration\n *\n * A comprehensive adapter that ensures Alpine.js components work seamlessly\n * with Turbo Drive, Turbo Stream, and Turbo Frame updates.\n *\n * @author TurboHarmony Contributors\n * @version 1.0.0\n * @license MIT\n */\n\nclass TurboHarmony {\n  constructor(options = {}) {\n    this.options = {\n      // Debug and logging\n      debug: false,\n      // @if DEBUG\n      logLevel: 'warn', // 'debug', 'info', 'warn', 'error'\n      // @endif\n\n      // State management\n      preserveState: false,\n      preserveStateSelectors: ['[x-data]'],\n\n      // Element filtering\n      skipSelectors: [\n        '.turbo-harmony-skip',\n        '.no-alpine',\n        '[data-turbo-harmony-skip]'\n      ],\n\n      // Performance options\n      reinitDelay: 0, // ms delay before reinitializing\n      batchUpdates: true,\n\n      // Lifecycle hooks\n      beforeReinit: null,      // (element) => {}\n      afterReinit: null,       // (element) => {}\n      onError: null,           // (error, context) => {}\n\n      // Advanced options\n      watchAttributes: ['x-data', 'x-show', 'x-if', 'x-for'],\n      autoStart: true,\n\n      ...options\n    }\n\n    // @if DEBUG\n    // Performance and debugging metrics\n    this.metrics = {\n      streamUpdates: 0,\n      frameUpdates: 0,\n      driveNavigation: 0,\n      reinitializations: 0,\n      errors: 0,\n      performance: [],\n      startTime: performance.now()\n    }\n    // @endif\n\n    // Internal state\n    this.isInitialized = false\n    this.preservedStates = new WeakMap()\n    this.initializedElements = new WeakSet()\n    \n    // @if DEBUG\n    this.componentLifecycle = new Map()\n    // @endif\n\n    // Bind methods to maintain context\n    this.handleBeforeVisit = this.handleBeforeVisit.bind(this)\n    this.handleLoad = this.handleLoad.bind(this)\n    this.handleBeforeStreamRender = this.handleBeforeStreamRender.bind(this)\n    this.handleStreamRender = this.handleStreamRender.bind(this)\n    this.handleBeforeFrameRender = this.handleBeforeFrameRender.bind(this)\n    this.handleFrameRender = this.handleFrameRender.bind(this)\n    this.handleError = this.handleError.bind(this)\n\n    if (this.options.autoStart) {\n      this.init()\n    }\n  }\n\n  /**\n   * Initialize TurboHarmony\n   * Validates dependencies and sets up event listeners\n   */\n  init() {\n    if (this.isInitialized) {\n      this.log('warn', 'TurboHarmony already initialized')\n      return this\n    }\n\n    this.validateDependencies()\n    this.setupEventListeners()\n\n    this.isInitialized = true\n    this.log('info', 'TurboHarmony initialized successfully', {\n      options: this.options,\n      version: '1.0.0'\n    })\n\n    return this\n  }\n\n  /**\n   * Validate that required dependencies are available\n   */\n  validateDependencies() {\n    if (typeof window === 'undefined') {\n      throw new Error('TurboHarmony: window object not available')\n    }\n\n    if (!window.Alpine) {\n      throw new Error('TurboHarmony: Alpine.js not found. Please ensure Alpine.js is loaded before TurboHarmony.')\n    }\n\n    if (!window.Turbo) {\n      throw new Error('TurboHarmony: Turbo not found. Please ensure @hotwired/turbo is loaded before TurboHarmony.')\n    }\n\n    this.log('debug', 'Dependencies validated successfully')\n  }\n\n  /**\n   * Set up all Turbo event listeners\n   */\n  setupEventListeners() {\n    // Turbo Drive events (full page navigation)\n    document.addEventListener('turbo:before-visit', this.handleBeforeVisit)\n    document.addEventListener('turbo:load', this.handleLoad)\n\n    // Turbo Stream events (partial page updates) - Main focus\n    document.addEventListener('turbo:before-stream-render', this.handleBeforeStreamRender)\n    document.addEventListener('turbo:stream-render', this.handleStreamRender)\n\n    // Turbo Frame events (frame-specific updates)\n    document.addEventListener('turbo:before-frame-render', this.handleBeforeFrameRender)\n    document.addEventListener('turbo:frame-render', this.handleFrameRender)\n\n    // Error handling\n    window.addEventListener('error', this.handleError)\n    window.addEventListener('unhandledrejection', this.handleError)\n\n    this.log('debug', 'Event listeners registered')\n  }\n\n  /**\n   * Handle Turbo Drive before visit (full page navigation)\n   */\n  handleBeforeVisit(event) {\n    // @if DEBUG\n    this.metrics.driveNavigation++\n    // @endif\n    this.log('debug', 'Turbo Drive: before visit', { location: event.detail.url })\n\n    // Clean up Alpine instances before navigation\n    if (Alpine.destroyTree) {\n      Alpine.destroyTree(document.body)\n    }\n  }\n\n  /**\n   * Handle Turbo Drive load (after page navigation)\n   */\n  handleLoad(event) {\n    this.log('debug', 'Turbo Drive: load complete')\n\n    // Only reinitialize DOM tree, don't call Alpine.start() again\n    if (Alpine.initTree) {\n      Alpine.initTree(document.body)\n    }\n  }\n\n  /**\n   * Handle before Turbo Stream render\n   */\n  handleBeforeStreamRender(event) {\n    this.log('debug', 'Turbo Stream: before render', {\n      action: event.detail?.action,\n      target: event.detail?.target\n    })\n\n    // @if PRESERVE_STATE\n    // Prepare for Stream update\n    const targetElement = this.findTargetElement(event)\n    if (targetElement && this.options.preserveState) {\n      this.preserveAlpineState(targetElement)\n    }\n    // @endif\n  }\n\n  /**\n   * Handle Turbo Stream render (after partial update)\n   * This is the core functionality for Stream integration\n   */\n  handleStreamRender(event) {\n    // @if DEBUG\n    const startTime = performance.now()\n    this.metrics.streamUpdates++\n    // @endif\n\n    try {\n      const targetElement = this.findTargetElement(event)\n\n      if (!targetElement) {\n        this.log('warn', 'Turbo Stream: target element not found', event.detail)\n        return\n      }\n\n      this.log('debug', 'Turbo Stream: render detected', {\n        action: event.detail?.action,\n        target: targetElement.tagName,\n        id: targetElement.id,\n        classes: targetElement.className\n      })\n\n      // Check if we should skip this element\n      if (this.shouldSkipElement(targetElement)) {\n        this.log('debug', 'Turbo Stream: skipping element due to skip selector')\n        return\n      }\n\n      // Perform Alpine reinitialization\n      this.reinitializeAlpineInElement(targetElement)\n\n      // @if DEBUG\n      // Record performance\n      const endTime = performance.now()\n      this.metrics.performance.push(endTime - startTime)\n      // @endif\n\n    } catch (error) {\n      this.handleError(error, 'handleStreamRender')\n    }\n  }\n\n  /**\n   * Handle before Turbo Frame render\n   */\n  handleBeforeFrameRender(event) {\n    this.log('debug', 'Turbo Frame: before render', { frame: event.target.id })\n\n    // @if DEBUG\n    // Clean up tracking for elements that will be removed\n    const frameElement = event.target\n    if (frameElement) {\n      const alpineElements = frameElement.querySelectorAll('[x-data]')\n      alpineElements.forEach(el => {\n        this.initializedElements.delete(el)\n        this.trackComponentLifecycle(el, 'beforeDestroy')\n      })\n    }\n    // @endif\n  }\n\n  /**\n   * Handle Turbo Frame render\n   */\n  handleFrameRender(event) {\n    // @if DEBUG\n    this.metrics.frameUpdates++\n    // @endif\n    const frameElement = event.target\n\n    this.log('debug', 'Turbo Frame: render complete', { frame: frameElement.id })\n\n    // Reinitialize Alpine within the frame\n    if (!this.shouldSkipElement(frameElement)) {\n      this.reinitializeAlpineInElement(frameElement)\n    }\n  }\n\n  /**\n   * Find the target element from a Turbo event\n   */\n  findTargetElement(event) {\n    // Try multiple ways to find the target element\n    return event.target ||\n           event.detail?.target ||\n           (event.detail?.selector && document.querySelector(event.detail.selector)) ||\n           null\n  }\n\n  /**\n   * Check if an element should be skipped for Alpine reinitialization\n   */\n  shouldSkipElement(element) {\n    if (!element || !element.matches) return true\n\n    return this.options.skipSelectors.some(selector => {\n      try {\n        return element.matches(selector)\n      } catch (e) {\n        this.log('warn', `Invalid skip selector: ${selector}`, e)\n        return false\n      }\n    })\n  }\n\n  /**\n   * Reinitialize Alpine.js for a specific element\n   * This is the core method that makes the magic happen\n   */\n  reinitializeAlpineInElement(element) {\n    // @if DEBUG\n    this.metrics.reinitializations++\n    // @endif\n\n    try {\n      this.log('debug', 'Reinitializing Alpine in element', {\n        tag: element.tagName,\n        id: element.id,\n        classes: element.className\n      })\n\n      // Execute beforeReinit hook\n      if (this.options.beforeReinit) {\n        this.options.beforeReinit(element)\n      }\n\n      // @if PRESERVE_STATE\n      // Preserve state if enabled\n      if (this.options.preserveState) {\n        this.preserveAlpineState(element)\n      }\n      // @endif\n\n      // Track initialized elements to prevent double initialization\n      const alpineElements = element.querySelectorAll('[x-data]')\n      const elementsToInit = []\n\n      alpineElements.forEach(el => {\n        // Skip if already initialized and still connected\n        if (el._x_dataStack && el._x_dataStack.length > 0 && this.initializedElements.has(el)) {\n          this.log('debug', 'Skipping already initialized element', {\n            id: el.id,\n            classes: el.className\n          })\n          // @if DEBUG\n          this.trackComponentLifecycle(el, 'skipped')\n          // @endif\n          return\n        }\n        elementsToInit.push(el)\n        // @if DEBUG\n        this.trackComponentLifecycle(el, 'queued')\n        // @endif\n      })\n\n      // Only destroy and reinit if there are uninitialized elements\n      if (elementsToInit.length > 0) {\n        // Destroy existing Alpine instances within the element\n        if (Alpine.destroyTree) {\n          Alpine.destroyTree(element)\n        }\n\n        // Reinitialize Alpine\n        const reinit = () => {\n          if (Alpine.initTree) {\n            Alpine.initTree(element)\n          } else if (Alpine.start) {\n            // Fallback for older Alpine versions\n            Alpine.start()\n          }\n\n          // Mark elements as initialized\n          elementsToInit.forEach(el => {\n            this.initializedElements.add(el)\n            // @if DEBUG\n            this.trackComponentLifecycle(el, 'initialized')\n            // @endif\n          })\n\n          // @if PRESERVE_STATE\n          // Restore state if preserved\n          if (this.options.preserveState) {\n            this.restoreAlpineState(element)\n          }\n          // @endif\n\n          // Execute afterReinit hook\n          if (this.options.afterReinit) {\n            this.options.afterReinit(element)\n          }\n\n          this.log('debug', 'Alpine reinitialization complete', {\n            initialized: elementsToInit.length\n          })\n        }\n\n        // Apply delay if configured\n        if (this.options.reinitDelay > 0) {\n          setTimeout(reinit, this.options.reinitDelay)\n        } else {\n          reinit()\n        }\n      } else {\n        this.log('debug', 'No elements need reinitialization')\n      }\n\n    } catch (error) {\n      this.handleError(error, 'reinitializeAlpineInElement')\n    }\n  }\n\n  // @if PRESERVE_STATE\n  /**\n   * Preserve Alpine component state before reinitialization\n   */\n  preserveAlpineState(element) {\n    try {\n      const alpineElements = element.querySelectorAll(this.options.preserveStateSelectors.join(','))\n      const states = new Map()\n\n      alpineElements.forEach(el => {\n        // Access Alpine's internal data stack\n        if (el._x_dataStack && el._x_dataStack.length > 0) {\n          try {\n            const state = this.safeStringify(el._x_dataStack[0])\n            states.set(this.getElementKey(el), JSON.parse(state))\n          } catch (e) {\n            this.log('warn', 'Failed to preserve state for element', e)\n          }\n        }\n      })\n\n      this.preservedStates.set(element, states)\n      this.log('debug', `Preserved state for ${states.size} Alpine components`)\n\n    } catch (error) {\n      this.handleError(error, 'preserveAlpineState')\n    }\n  }\n\n  /**\n   * Restore Alpine component state after reinitialization\n   */\n  restoreAlpineState(element) {\n    try {\n      const savedStates = this.preservedStates.get(element)\n      if (!savedStates) return\n\n      // Wait a tick for Alpine to fully initialize\n      setTimeout(() => {\n        const alpineElements = element.querySelectorAll(this.options.preserveStateSelectors.join(','))\n\n        alpineElements.forEach(el => {\n          const key = this.getElementKey(el)\n          const savedState = savedStates.get(key)\n\n          if (savedState && el._x_dataStack && el._x_dataStack.length > 0) {\n            try {\n              // Only restore properties that exist and are writable\n              const currentData = el._x_dataStack[0]\n              Object.keys(savedState).forEach(prop => {\n                const descriptor = Object.getOwnPropertyDescriptor(currentData, prop)\n                // Skip getters/setters and non-writable properties\n                if (!descriptor || (descriptor.set || descriptor.writable !== false)) {\n                  try {\n                    currentData[prop] = savedState[prop]\n                  } catch (e) {\n                    this.log('debug', `Skipped non-writable property: ${prop}`)\n                  }\n                }\n              })\n              this.log('debug', 'Restored state for element', key)\n            } catch (e) {\n              this.log('warn', 'Failed to restore state for element', e)\n            }\n          }\n        })\n\n        // Clean up\n        this.preservedStates.delete(element)\n      }, 10)\n\n    } catch (error) {\n      this.handleError(error, 'restoreAlpineState')\n    }\n  }\n\n  /**\n   * Generate a unique key for an element (for state preservation)\n   */\n  getElementKey(element) {\n    return element.id ||\n           element.getAttribute('data-key') ||\n           `${element.tagName}-${Array.from(element.parentNode.children).indexOf(element)}`\n  }\n\n  /**\n   * Safe JSON stringify that handles circular references and non-serializable values\n   */\n  safeStringify(obj) {\n    const seen = new WeakSet()\n\n    return JSON.stringify(obj, (key, value) => {\n      // Skip DOM elements and other non-serializable browser objects\n      if (value instanceof HTMLElement ||\n          value instanceof Window ||\n          value instanceof Document ||\n          value instanceof Event) {\n        return undefined\n      }\n\n      // Skip functions\n      if (typeof value === 'function') {\n        return undefined\n      }\n\n      // Skip properties that start with _ (often internal/private)\n      if (typeof key === 'string' && key.startsWith('_')) {\n        return undefined\n      }\n\n      // Handle circular references\n      if (typeof value === 'object' && value !== null) {\n        if (seen.has(value)) {\n          return undefined\n        }\n        seen.add(value)\n      }\n\n      return value\n    })\n  }\n  // @endif\n\n  /**\n   * Enhanced logging system with levels and formatting\n   */\n  log(level, message, data = null) {\n    if (!this.options.debug) return\n\n    // @if DEBUG\n    const levels = { debug: 0, info: 1, warn: 2, error: 3 }\n    const currentLevel = levels[this.options.logLevel] || 1\n\n    if (levels[level] >= currentLevel) {\n      const timestamp = new Date().toISOString()\n      const prefix = `[TurboHarmony ${timestamp}]`\n      const method = level === 'error' ? 'error' :\n                     level === 'warn' ? 'warn' :\n                     level === 'info' ? 'info' : 'log'\n\n      if (data) {\n        console[method](prefix, message, data)\n      } else {\n        console[method](prefix, message)\n      }\n    }\n    // @else\n    if (level === 'error' || level === 'warn') {\n      console[level]('[TurboHarmony]', message, data || '')\n    }\n    // @endif\n  }\n\n  /**\n   * Centralized error handling\n   */\n  handleError(error, context = '') {\n    // @if DEBUG\n    this.metrics.errors++\n    // @endif\n\n    const errorInfo = {\n      message: error.message || error,\n      context,\n      timestamp: new Date().toISOString(),\n      // @if DEBUG\n      metrics: this.getMetrics()\n      // @endif\n    }\n\n    this.log('error', `TurboHarmony error in ${context}:`, errorInfo)\n\n    // Execute custom error handler if provided\n    if (this.options.onError) {\n      try {\n        this.options.onError(error, errorInfo)\n      } catch (handlerError) {\n        console.error('[TurboHarmony] Error in custom error handler:', handlerError)\n      }\n    }\n  }\n\n  // @if DEBUG\n  /**\n   * Track component lifecycle events\n   */\n  trackComponentLifecycle(element, event) {\n    const key = this.getElementKey(element)\n    const timestamp = performance.now()\n\n    if (!this.componentLifecycle.has(key)) {\n      this.componentLifecycle.set(key, [])\n    }\n\n    this.componentLifecycle.get(key).push({\n      event,\n      timestamp,\n      element: {\n        id: element.id,\n        classes: element.className,\n        tag: element.tagName\n      }\n    })\n  }\n\n  /**\n   * Get lifecycle report for debugging\n   */\n  getLifecycleReport() {\n    const report = []\n    this.componentLifecycle.forEach((events, key) => {\n      report.push({\n        component: key,\n        events: events,\n        totalEvents: events.length,\n        duplicateInits: events.filter(e => e.event === 'initialized').length - 1\n      })\n    })\n    return report\n  }\n\n  /**\n   * Get performance and usage metrics\n   */\n  getMetrics() {\n    const uptime = performance.now() - this.metrics.startTime\n    const avgPerformance = this.metrics.performance.length > 0\n      ? this.metrics.performance.reduce((a, b) => a + b) / this.metrics.performance.length\n      : 0\n\n    return {\n      ...this.metrics,\n      uptime: Math.round(uptime),\n      averageReinitTime: Math.round(avgPerformance * 100) / 100,\n      successRate: this.metrics.errors === 0 ? 100 :\n        Math.round((1 - this.metrics.errors / (this.metrics.streamUpdates + this.metrics.frameUpdates + this.metrics.driveNavigation)) * 100),\n      totalComponents: this.componentLifecycle.size,\n      lifecycleReport: this.getLifecycleReport()\n    }\n  }\n\n  /**\n   * Reset metrics (useful for testing and debugging)\n   */\n  resetMetrics() {\n    this.metrics = {\n      streamUpdates: 0,\n      frameUpdates: 0,\n      driveNavigation: 0,\n      reinitializations: 0,\n      errors: 0,\n      performance: [],\n      startTime: performance.now()\n    }\n\n    this.log('info', 'Metrics reset')\n  }\n  // @endif\n\n  /**\n   * Manually reinitialize Alpine for the entire document\n   * Useful for debugging or manual intervention\n   */\n  reinitializeAll() {\n    this.log('info', 'Manual reinitialization triggered')\n    this.reinitializeAlpineInElement(document.body)\n  }\n\n  /**\n   * Destroy TurboHarmony and clean up event listeners\n   */\n  destroy() {\n    document.removeEventListener('turbo:before-visit', this.handleBeforeVisit)\n    document.removeEventListener('turbo:load', this.handleLoad)\n    document.removeEventListener('turbo:before-stream-render', this.handleBeforeStreamRender)\n    document.removeEventListener('turbo:stream-render', this.handleStreamRender)\n    document.removeEventListener('turbo:before-frame-render', this.handleBeforeFrameRender)\n    document.removeEventListener('turbo:frame-render', this.handleFrameRender)\n    window.removeEventListener('error', this.handleError)\n    window.removeEventListener('unhandledrejection', this.handleError)\n\n    this.isInitialized = false\n    this.log('info', 'TurboHarmony destroyed')\n  }\n}\n\n// Export for different module systems\nexport default TurboHarmony\nexport { TurboHarmony }\n\n// Global assignment for non-module usage\nif (typeof window !== 'undefined') {\n  window.TurboHarmony = TurboHarmony\n}"],"names":["TurboHarmony","constructor","options","this","debug","preserveState","preserveStateSelectors","skipSelectors","reinitDelay","batchUpdates","beforeReinit","afterReinit","onError","watchAttributes","autoStart","isInitialized","preservedStates","WeakMap","initializedElements","WeakSet","handleBeforeVisit","bind","handleLoad","handleBeforeStreamRender","handleStreamRender","handleBeforeFrameRender","handleFrameRender","handleError","init","log","validateDependencies","setupEventListeners","version","window","Error","Alpine","Turbo","document","addEventListener","event","location","detail","url","destroyTree","body","initTree","action","target","targetElement","findTargetElement","preserveAlpineState","tagName","id","classes","className","shouldSkipElement","reinitializeAlpineInElement","error","frame","frameElement","selector","querySelector","element","matches","some","e","tag","alpineElements","querySelectorAll","elementsToInit","forEach","el","_x_dataStack","length","has","push","reinit","start","add","restoreAlpineState","initialized","setTimeout","join","states","Map","state","safeStringify","set","getElementKey","JSON","parse","size","savedStates","get","key","savedState","currentData","Object","keys","prop","descriptor","getOwnPropertyDescriptor","writable","delete","getAttribute","Array","from","parentNode","children","indexOf","obj","seen","stringify","value","HTMLElement","Window","Document","Event","startsWith","level","message","data","console","context","errorInfo","timestamp","Date","toISOString","handlerError","reinitializeAll","destroy","removeEventListener"],"mappings":"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"}